from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from states import SetConfigsToBot
import os
from dotenv import load_dotenv
from db_func import delete_or_insert_data, insert_many, select_data, select_data_single, select_data_dict
from btns.admin_options import admin_btns
from btns.admin_replybtn import admin_replybtns
from aiogram.exceptions import TelegramBadRequest
from btns.cancel import back_btn
from variables import ttl_ratiosum_process
from btns.bonuses import bonuses_btns
from btns.cancel import back_and_otmena_btn
load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
admin_id = os.getenv('ADMIN_ID')


router = Router()  # [1]

from handlers.for_start import start_func
@router.message(Command("start"))  # [2]
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    exist_user = select_data("SELECT*FROM usernames WHERE telega_id = ?", (message.chat.id, ))
    if exist_user == []:
        await start_func(message, state, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä–æ–ª—å, –≤—ã–¥–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', SetConfigsToBot.set_password, bot)
    else:
        if message.chat.id == int(admin_id):
           await message.answer("‚öî‚öî‚öî", reply_markup=admin_replybtns())
        else:
           await message.answer("üöÄüõ∏üõ∞", reply_markup=user_replybtns())
    await bot.delete_message(message.chat.id, message.message_id)



from handlers.for_get_password import correct_password_proccess
@router.message(SetConfigsToBot.set_password)
async def sss_psw(message: Message, state: FSMContext, bot: Bot):
    await correct_password_proccess(message, state, bot)#tut prodoljaetsya algoritm dlya userov-----SetConfigsToBot.set_name

from handlers.for_get_password import if_user
from btns.weekdays_btns import weekdays, hours, mins
from btns.notify_yesno import should_notify
@router.message(SetConfigsToBot.set_name)
async def set_name(message: Message, state: FSMContext, bot: Bot):
    isusers_exist = select_data("SELECT name FROM usernames")
    if isusers_exist == []:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –∑–∞–¥–∞–ª –∏–º–µ–Ω–∞")
        try:
            await bot.delete_messages(message.chat.id, (message.message_id, ))
        except TelegramBadRequest:
            print(f"OSHIBKA UDALENIYA")
    else:
        data = select_data("SELECT name FROM usernames WHERE name = ?", (message.text,))
        
        if data == [] or message.text == 'Admin':
            # print(data)
            # print(message.text)
            #await message.answer('–¢–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
            await if_user(message, bot, state, '–¢–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥. –ï—Å–ª–∏ –ø–æ—Å–ª–µ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—ã –Ω–µ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', SetConfigsToBot.set_name)
            
        else:
            await message.answer("–ù—É–∂–Ω–æ –ª–∏ –í–∞–º, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", reply_markup=should_notify())
            try:
                await bot.delete_messages(message.chat.id, (message.message_id, ))
            except TelegramBadRequest:
                print(f"OSHIBKA UDALENIYA")
            await state.update_data(name1 = message.text)
            

@router.callback_query(F.data == 'notifyme')
async def notifyme(call: CallbackQuery, state: FSMContext, bot: Bot):
    await set_firstday_of_notification(call.message, state, bot, "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ï—Å–ª–∏ –¥–µ–Ω—å –æ–¥–∏–Ω —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–û–•–†–ê–ù–ò–¢–¨")


@router.callback_query(F.data == 'backtofirstday')
async def frst_day(call: CallbackQuery, state: FSMContext, bot: Bot):
    await set_firstday_of_notification(call.message, state, bot, "–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ï—Å–ª–∏ –¥–µ–Ω—å –æ–¥–∏–Ω —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–û–•–†–ê–ù–ò–¢–¨")


from aiogram.types import InlineKeyboardButton
@router.callback_query(F.data.startswith('dayofweek_'), SetConfigsToBot.set_notification)
async def set_firstdaycaller(call: CallbackQuery, state: FSMContext, bot: Bot):
    # first_day = call.data.split('_')[1]
    await set_firstday(call, state, bot, )


async def set_firstday(call, state, bot):
    try:
        first_day = call.data.split('_')[1]
        await state.update_data(first_day = first_day)
    except IndexError:
        state_data = await state.get_data()
        first_day = state_data['first_day']
    # print(first_day)
    # print(first_day)
    save_btn = None
    end_text = ''
    backto_firstday = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data="backtofirstday")
    if first_day != '':
        save_btn = InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f"savedates")
        end_text = '–ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–û–•–†–ê–ù–ò–¢–¨'
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω {first_day}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ –∫–∞–∫–æ–≥–æ –¥–Ω—è –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. {end_text}", reply_markup=weekdays(first_day, nazad=backto_firstday, sohranit=save_btn))#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!save_dates
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_notification1)
    await call.answer()


@router.callback_query(F.data == "backtosecondday")
async def secondday_caller(call: CallbackQuery, state: FSMContext, bot: Bot):
    await set_firstday(call, state, bot)


async def second_day_proccess(call, state, bot, text):
    save_button = InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data="save_hour")
    back_button = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data="backtosecondday")
    await call.message.answer(text, reply_markup = hours(sohranit=save_button, nazad=back_button))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_notification2)
    await call.answer()


@router.callback_query(F.data == "save_hour")
async def save_hour(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(hour = '20', minute = '00')
    #await state.update_data(minute = '00')
    await notificationtime_saver(call, state, bot)




@router.callback_query(F.data == "savedates" , SetConfigsToBot.set_notification1)
async def set_secondday(call: CallbackQuery, state: FSMContext, bot: Bot):
    await second_day_proccess(call, state, bot, "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ 20.00, –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–û–•–†–ê–ù–ò–¢–¨ –∏–Ω–∞—á–µ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å.")


@router.callback_query(F.data.startswith('dayofweek_'), SetConfigsToBot.set_notification1)
async def set_secondday(call: CallbackQuery, state: FSMContext, bot: Bot):
    second_day = call.data.split('_')[1]
    await state.update_data(second_day = second_day)
    await second_day_proccess(call, state, bot, f"–í—ã–±—Ä–∞–Ω {second_day}. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ 20.00, –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–û–•–†–ê–ù–ò–¢–¨ –∏–Ω–∞—á–µ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å.")

@router.callback_query(F.data == "backtohours")
async def set_secondday(call: CallbackQuery, state: FSMContext, bot: Bot):
    await second_day_proccess(call, state, bot, "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ 20.00, –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–û–•–†–ê–ù–ò–¢–¨ –∏–Ω–∞—á–µ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å.")


@router.callback_query(F.data.startswith('hour_'), SetConfigsToBot.set_notification2)
async def set_hour(call: CallbackQuery, state: FSMContext, bot: Bot):
    hour = call.data.split('_')[1]
    await state.update_data(hour = hour)
    backto_hours = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data="backtohours")
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω —á–∞—Å {hour}. –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç", reply_markup=mins(nazad=backto_hours))#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_notification_final)
    await call.answer()

from btns.users_replybtn import user_replybtns

@router.callback_query(F.data == "dontnotifyme")
async def dontnotifyme(call: CallbackQuery, state: FSMContext, bot: Bot):
    name1 = await state.get_data()
    delete_or_insert_data("UPDATE usernames SET telega_id = ? WHERE name = ?", (call.message.chat.id, name1['name1'],))
    await call.message.answer("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞. –í –º–µ–Ω—é \"–û—Å—Ç–∞–ª—å–Ω–æ–µ\" –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥, –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏ –¥—Ä", reply_markup=user_replybtns())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.clear()
    await call.answer()


@router.callback_query(F.data.startswith('minute_'), SetConfigsToBot.set_notification_final)
async def set_mins(call: CallbackQuery, state: FSMContext, bot: Bot):
    await notificationtime_saver(call, state, bot)


async def notificationtime_saver(call, state, bot):
    user_data = await state.get_data()
    print(user_data)
    try:
        minute = user_data["minute"]
    except KeyError:
        minute = call.data.split('_')[1]
    
    try:
        period = f"{user_data['first_day']}-{user_data['second_day']}"
    except KeyError:
        period = f"{user_data['first_day']}"

    if call.message.chat.id  == int(admin_id):
        data = select_data("SELECT * FROM usernames WHERE telega_id = ?", (admin_id,))
        if data == []:
            delete_or_insert_data("INSERT INTO usernames (name, telega_id, hour, minute, period) VALUES (?, ?, ?, ?, ?)", ('Admin', call.message.chat.id, user_data['hour'], minute, f"{period}",))
        else:
            delete_or_insert_data("UPDATE usernames SET telega_id = ?, hour=?, minute=?, period=? WHERE name = ?", (call.message.chat.id, user_data['hour'], minute, f"{period}", 'Admin'))
        await call.message.answer(f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è {user_data['hour']}:{minute}.\n–î–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {period}", reply_markup=admin_replybtns())
    else:
        print(user_data['name'])
        if user_data['name'] == "–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏":#----------------------------------------------------- !!! TUT VOZMOJENi OSHIBKI !!! --------------------------------------
            delete_or_insert_data("UPDATE usernames SET hour=?, minute=?, period=? WHERE telega_id = ?", (user_data['hour'], minute, f"{period}", call.message.chat.id, ))
        else:
            delete_or_insert_data("UPDATE usernames SET telega_id = ?, hour=?, minute=?, period=? WHERE name = ?", (call.message.chat.id, user_data['hour'], minute, f"{period}", user_data['name']))
        await call.message.answer(f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è {user_data['hour']}:{minute}. \n–î–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {period}", reply_markup=user_replybtns())#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.clear()
    await call.answer()

from handlers.user_settings import call_users_settings
@router.callback_query(F.data == 'users')
async def usr_stgs(call: CallbackQuery, bot: Bot):
    await call_users_settings(call, bot) # add_users | delete_user | edit_user | back

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô----------------------------------------------
@router.callback_query(F.data == 'list_users')
async def show_users(call: CallbackQuery, state: FSMContext, bot: Bot):
    usernames = select_data("SELECT name FROM usernames")#[('—Ü—Å–∫–∞',), ('–¥–∏–Ω–∞–º–æ',), ('Admin',), ('–ë–∞—Ä—Å–µ–ª–æ–Ω–∞',)]
    if usernames == []:
        await call.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=back_btn('users'))
    else:
        usernames_msg = ''
        for i, (name, ) in enumerate(usernames):
            usernames_msg += str(i+1) + ") "+ name +'\n'
        await call.message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n {usernames_msg}", reply_markup=back_btn('users'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –î–û–ë–ê–í–õ–Ø–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô-----------------------------------------------------
@router.callback_query(F.data == 'add_users', StateFilter(None))
async def usr_stgs(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ –≤–ø–∏—à–∏—Ç–µ –∏–º—è –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è).", reply_markup=back_btn('users'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
    await state.set_state(SetConfigsToBot.set_user_names)


from btns.users_edit_btns import get_users_settings

@router.message(SetConfigsToBot.set_user_names)
async def usr_stgs_sub(message: Message, state: FSMContext, bot: Bot):
    users_list = [(name.strip(), ) for name in message.text.split(',')]
    insert_many("INSERT INTO usernames (name) VALUES(?)", users_list)
    await state.clear()
    await message.answer(f"{message.text} –±—ã–ª(–∏) –¥–æ–±–∞–ª–µ–Ω(—ã)", reply_markup=get_users_settings())
    try:
        await bot.delete_messages(message.chat.id, (message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")


#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ò–ó–ú–ï–ù–Ø–ï–¢ –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø-------------------------------------------------
from btns.users_for_edit import users_for_edit
@router.callback_query(F.data == 'edit_user')
async def usr_stgs_edit(call: CallbackQuery, bot: Bot):
    usernames = select_data("SELECT name FROM usernames")#[('—Ü—Å–∫–∞',), ('–¥–∏–Ω–∞–º–æ',), ('Admin',), ('–ë–∞—Ä—Å–µ–ª–æ–Ω–∞',)]
    for x in usernames:
        if x[0] == 'Admin':
            usernames.remove(x)
    if usernames == []:
        await call.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=back_btn('users'))
    else:
        await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=users_for_edit('editusername_'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.callback_query(F.data.startswith('editusername_'), StateFilter(None))
async def edit_username(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    user = call.data.split('_')[1]
    await state.update_data(name = user)
    await call.message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è \'{user}\'. –í –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤–Ω–µ—Å–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \'{user}\'")
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_new_username)
    await call.answer()

@router.message(SetConfigsToBot.set_new_username)
async def new_usrname(message: Message, state: FSMContext, bot: Bot):
    #await state.clear()
    user = await state.get_data()
    try:
        await bot.delete_messages(message.chat.id, (message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    delete_or_insert_data("UPDATE usernames SET name = ? WHERE name = ?", (message.text, user['name']))
    await message.answer(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è {user['name']} –Ω–∞ {message.text}", reply_markup=get_users_settings())
    await state.clear()


#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –£–î–ê–õ–Ø–ï–¢ –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø--------------------------------------------------------
@router.callback_query(F.data == 'delete_user')
async def usr_stgs_delete(call: CallbackQuery, bot: Bot):
    usernames = select_data("SELECT name FROM usernames")#[('—Ü—Å–∫–∞',), ('–¥–∏–Ω–∞–º–æ',), ('Admin',), ('–ë–∞—Ä—Å–µ–ª–æ–Ω–∞',)]
    for x in usernames:
        if x[0] == 'Admin':
            usernames.remove(x)
    if usernames == []:
        await call.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=back_btn('users'))
    else:
        await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=users_for_edit('deleteusername_'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.callback_query(F.data.startswith('deleteusername_'), StateFilter(None))
async def edit_username(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    user = call.data.split('_')[1]
    tel_id = select_data_dict("SELECT telega_id FROM usernames WHERE name = ?", (user,))
    if tel_id != []:
        delete_or_insert_data("DELETE FROM userpoints_weekly WHERE telega_id = ?", (tel_id[0]['telega_id'], ))    
    delete_or_insert_data("DELETE FROM usernames WHERE name = ?", (user, ))
    
    await call.message.answer(f"–í—ã —É–¥–∞–ª–∏–ª–∏ \'{user}\'.'", reply_markup=get_users_settings())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞------------------------------------------------------
from btns.delete_menu import delete_options
@router.callback_query(F.data == 'deleteprogress_menu')
async def deleteprogress_menu(call: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    await call.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ–¥–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–∑–æ–≤–∞—Ç–µ–ª–µ–π?", reply_markup=delete_options())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

from btns.cancel import zakrit_btn
@router.callback_query(F.data == 'delete_allprogress')
async def deleteallprogress(call: CallbackQuery, bot: Bot, state: FSMContext):
    delete_or_insert_data("DELETE FROM userpoints_weekly")
    delete_or_insert_data("DELETE FROM user_bonus")
    await state.clear()
    await call.message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω", reply_markup=zakrit_btn())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –î–ï–õ–ê–ï–¢ –í–û–ó–í–†–ê–¢ –ù–ê –ì–õ–ê–í–ù–£–Æ--------------------------------------------------------
@router.callback_query(F.data == 'back_to_main_menu')
async def back_to_main_menu(call: CallbackQuery, bot: Bot):
    await call.message.answer(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_btns())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ó–ê–î–ê–ï–¢ –ë–û–ù–£–°–´--------------------------------------------------------

from btns.bonuses import bonuses_btns
@router.callback_query(F.data == 'bonuses')
async def bonuses_process(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bonuses_caller(call, bot, state)

async def bonuses_caller(call, bot, state):
    await state.clear()
    await call.message.answer("–í —ç—Ç–æ–º –º–µ–Ω—é –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤. –í—Å–µ –±–æ–Ω—É—Å—ã –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –≤ –æ–±—â—É—é —Å—É–º–º—É –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏.\n–ï—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–∏–¥ –±–æ–Ω—É—Å–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞", reply_markup=bonuses_btns())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()




@router.callback_query(F.data == 'row_bonus', StateFilter(None))
async def rowbonus_process(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.message.answer("–í –ø–æ–ª–µ –≤–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ –±–æ–Ω—É—Å–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ–∏–Ω—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏.\n–ï—Å–ª–∏ –í—ã —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ –±–æ–Ω—É—Å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –Ω–µ–¥–µ–ª—é.\n–ï—Å–ª–∏ –í—ã —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –µ–¥–∏–Ω–∏—Ü—ã, —Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å—É–º–º–æ–π –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –Ω–µ–¥–µ–ª—é.\n–ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–∏—Ç–µ 0 –∏–ª–∏ 1, —Ç–æ –±–æ–Ω—É—Å –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=back_and_otmena_btn(data='bonuses'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
    await state.set_state(SetConfigsToBot.set_rowbonus)

from btns.cancel import back_and_zakrit_btn
@router.message(SetConfigsToBot.set_rowbonus)
async def rowbonus_process1(message: Message, bot: Bot, state: FSMContext):
    if re.match(r'^(\d+(\.\d*)?|\.\d+)$', message.text):
        bonus_score = message.text
        if ',' in message.text:
            bonus_score = message.text.replace(",", ".").replace(" ", "") 
        delete_or_insert_data("UPDATE bonus SET bonus_ratio = ? WHERE bonus_name=?", (bonus_score, '–ë–æ–Ω—É—Å —Å—Ç—Ä–æ–∫–∏', ))
        await message.answer(f"–ë–æ–Ω—É—Å —Å—Ç—Ä–æ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ {bonus_score}.", reply_markup=back_and_zakrit_btn(backbtn_text='‚¨Ö –ö –±–æ–Ω—É—Å–∞–º', data="bonuses"))
        await state.clear()
    else:
        await state.clear()
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", reply_markup=zakrit_btn())
        await state.set_state(SetConfigsToBot.set_rowbonus)
    try:
        await bot.delete_messages(message.chat.id, (message.message_id,  message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")



@router.callback_query(F.data == 'column_bonus', StateFilter(None))
async def colbonus_process(call: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    await call.message.answer("–í –ø–æ–ª–µ –≤–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ –±–æ–Ω—É—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –ø–æ–∏–Ω—Ç—ã –∑–∞ –¥–µ–Ω—å.\n–ï—Å–ª–∏ –í—ã —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ –±–æ–Ω—É—Å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –Ω–µ–¥–µ–ª—é.\n–ï—Å–ª–∏ –í—ã —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –µ–¥–∏–Ω–∏—Ü—ã, —Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å—É–º–º–æ–π –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –Ω–µ–¥–µ–ª—é.\n–ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–∏—Ç–µ 0 –∏–ª–∏ 1, —Ç–æ –±–æ–Ω—É—Å –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=back_and_otmena_btn(data='bonuses'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
    await state.set_state(SetConfigsToBot.set_colbonus)

@router.message(SetConfigsToBot.set_colbonus)
async def rowbonus_process1(message: Message, bot: Bot, state: FSMContext):
    if re.match(r'^(\d+(\.\d*)?|\.\d+)$', message.text):
        bonus_score = message.text
        if ',' in message.text:
            bonus_score = message.text.replace(",", ".").replace(" ", "") 
        delete_or_insert_data("UPDATE bonus SET bonus_ratio = ? WHERE bonus_name=?", (bonus_score, '–ë–æ–Ω—É—Å —Å—Ç–æ–ª–±—Ü–∞', ))
        await message.answer(f"–ë–æ–Ω—É—Å —Å—Ç–æ–ª–±—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ {bonus_score}.", reply_markup=back_and_zakrit_btn(backbtn_text='‚¨Ö –ö –±–æ–Ω—É—Å–∞–º', data="bonuses"))
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", reply_markup=zakrit_btn())
        await state.set_state(SetConfigsToBot.set_colbonus)
    try:
        await bot.delete_messages(message.chat.id, (message.message_id,  message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")

@router.callback_query(F.data == 'minimums_bonus', StateFilter(None))
async def colbonus_process(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.message.answer("–í –ø–æ–ª–µ –≤–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ –±–æ–Ω—É—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –º–∏–Ω–∏–º—É–º—ã –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.\n–ï—Å–ª–∏ –í—ã —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ –±–æ–Ω—É—Å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –Ω–µ–¥–µ–ª—é.\n–ï—Å–ª–∏ –í—ã —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ –µ–¥–∏–Ω–∏—Ü—ã, —Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å—É–º–º–æ–π –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –Ω–µ–¥–µ–ª—é.\n–ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–∏—Ç–µ 0 –∏–ª–∏ 1, —Ç–æ –±–æ–Ω—É—Å –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=back_and_otmena_btn(data='bonuses'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
    await state.clear()
    await state.set_state(SetConfigsToBot.set_minsbonus)

@router.message(SetConfigsToBot.set_minsbonus)
async def rowbonus_process1(message: Message, bot: Bot, state: FSMContext):
    if re.match(r'^(\d+(\.\d*)?|\.\d+)$', message.text):
        bonus_score = message.text
        if ',' in message.text:
            bonus_score = message.text.replace(",", ".").replace(" ", "") 
        delete_or_insert_data("UPDATE bonus SET bonus_ratio = ? WHERE bonus_name=?", (bonus_score, '–ë–æ–Ω—É—Å –º–∏–Ω–∏–º—É–º–æ–≤', ))
        await message.answer(f"–ë–æ–Ω—É—Å –º–∏–Ω–∏–º—É–º–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ {bonus_score}.", reply_markup=back_and_zakrit_btn(backbtn_text='‚¨Ö –ö –±–æ–Ω—É—Å–∞–º', data="bonuses"))
        await state.clear()
    else:
        await state.clear()
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", reply_markup=zakrit_btn())
        await state.set_state(SetConfigsToBot.set_rowbonus)
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")



@router.message(F.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def admin_menu_proccess(message: Message, state: FSMContext, bot: Bot):
    if message.chat.id == int(admin_id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_btns())
    await state.clear() 
    # await bot.delete_messages(message.chat.id, (message.message_id, ))
    try:
        await bot.delete_messages(message.chat.id, (message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    #await bot.delete_messages(message.chat.id, (message.message_id-1, ))

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù  –ø–æ–ª—É—á–∞–µ—Ç EXCEL –æ—Ç—á–µ—Ç------------------------------------------------------

from excel_creator import exsel_creator
@router.callback_query(F.data == 'excel_report')
async def send_excel(call: CallbackQuery, bot: Bot):
    exsel_creator()
    #import datetime
    # day = datetime.datetime.now().strftime("%Y-%m-%d")
    # file_path = f'excels/{day}.xlsx'  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—É—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    file_path = 'excels/Report.xlsx'
    if os.path.exists(file_path):
        await bot.send_document(call.message.chat.id, FSInputFile(file_path))
        # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
        try:
            await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
        except TelegramBadRequest:
            print(f"OSHIBKA UDALENIYA")
    else:
        await call.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @Dinis_Fizik", reply_markup=admin_btns())
    # else:
    #     await call.message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await call.answer()



#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–≥–ª–∞–≤–Ω–æ–π –ø–æ–∏–Ω—Ç–æ–≤----------------------------------------------

@router.callback_query(F.data == 'back_to_points_main_menu')
async def usr_stgs_delete(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.answer(f"–ú–µ–Ω—é –ø—É–Ω–∫—Ç—ã", reply_markup=points_main_menu())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.clear()
    await call.answer()

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ü–£–ù–ö–¢–´ –ü–†–û–ì–†–ï–°–°–ê---------------------------------------------------
@router.callback_query(F.data == 'list_progresspoints')
async def show_progresspoints(call:CallbackQuery, state: FSMContext, bot: Bot):
    progress_points = select_data("SELECT * FROM points")
    if progress_points == []:
        await call.message.answer("–ü—É–Ω–∫—Ç–æ–≤ –µ—â–µ –Ω–µ—Ç", reply_markup=back_btn('back_to_points_main_menu'))
    else:
        msg = '‚Ññ   –ò–ú–Ø   –ö–û–≠–§–¢   –ú–ò–ù–ò–ú–£–ú\n'
        for i, (id, name, score, mins,) in enumerate(progress_points):
            msg += f"{i+1})  {name}    {score}     {mins}\n"
        await call.message.answer(msg, reply_markup=back_btn('back_to_points_main_menu'))
    await call.answer()
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –î–û–ë–ê–í–õ–Ø–ï–¢ –ü–£–ù–ö–¢–´ –ü–†–û–ì–†–ï–°–°–ê---------------------------------------------------
from btns.points_main import points_main_menu
@router.callback_query(F.data == 'points')
async def back_to_main_menu(call: CallbackQuery, bot: Bot):
    await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", reply_markup=points_main_menu())
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()



@router.callback_query(F.data == 'add_progress_points')
async def usr_stgs(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.", reply_markup=back_and_otmena_btn('points'))
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
    await state.set_state(SetConfigsToBot.set_points_score)


@router.message(SetConfigsToBot.set_points_score)
async def usr_stgs_sub(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(point_name = message.text)
    await set_score_topoint(message, bot, state, message.text)

async def set_score_topoint(message, bot, state, text):
    await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è {text}, –≤ –≤–∏–¥–µ (2 –∏–ª–∏ 1.2)", reply_markup=back_btn("add_progress_points"))
    # await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1, ))
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_points_min)


@router.callback_query(F.data == "back_to_set_point_score")
async def back_to_set_point_score(call:CallbackQuery, state: FSMContext, bot: Bot):
    point_name = await state.get_data()
    await set_score_topoint(call.message, bot, state, point_name["point_name"])
    await call.answer()

@router.message(SetConfigsToBot.set_points_min)
async def usr_stgs_sub(message: Message, state: FSMContext, bot: Bot):
    if re.match(r'^(\d+(\.\d*)?|\.\d+)$', message.text):
        score = message.text
        if ',' in message.text:
            score = message.text.replace(",", ".").replace(" ", "")
        await state.update_data(point_score = score)
        await set_min1(message, state, bot)
    else:
        await message.answer(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥", reply_markup=back_and_otmena_btn('back_to_set_point_score'))
        await state.set_state(SetConfigsToBot.set_points_min)
    # await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1, ))
        try:
            await bot.delete_messages(message.chat.id, (message.message_id-1,))
        except TelegramBadRequest:
            print(f"OSHIBKA UDALENIYA")


@router.callback_query(F.data == "back_to_set_min")
async def set_min(call: CallbackQuery, state: FSMContext, bot: Bot):
    await set_min1(call.message, state, bot)
    call.answer()

async def set_min1(message, state, bot):
    score_data = await state.get_data()
    try:
        #print(f'Vse normalno {score_data}')
        txt = message.text
    except AttributeError:
        #print(f'AttributeError {score_data}')
        txt = score_data['point_score']
    # if message.text == "" or message.text == None:
    #     txt = score_data['point_score']
    except KeyError:
        print(score_data)
    await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –º–∏–Ω–∏–º—É–º –¥–ª—è {score_data['point_name']}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ {score_data['point_score']}", reply_markup=back_and_otmena_btn('back_to_set_point_score'))
    await state.set_state(SetConfigsToBot.set_points_names)
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")


@router.message(SetConfigsToBot.set_points_names)
async def usr_stgs_sub(message: Message, state: FSMContext, bot: Bot):
    #points_list = [(name.strip(), ) for name in message.text.split(',')]
    if re.match(r'^(\d+(\.\d*)?|\.\d+)$', message.text):
        min = message.text
        if ',' in message.text:
            min = message.text.replace(",", ".").replace(" ", "")
        score_data = await state.get_data()
        #print(score_data['edit_pointname'])
        try:
            pnt_name = score_data['point_name']
        except KeyError:
            pnt_name = score_data['edit_pointname']
        if select_data("SELECT point_name FROM points WHERE point_name = ?", (score_data['point_name'],)) != []:
            delete_or_insert_data("UPDATE points SET point_name = ?, ratio = ?, mins = ? WHERE point_name = ?", (score_data['point_name'], score_data['point_score'], min, pnt_name, ))
        else:
            delete_or_insert_data("INSERT INTO points (point_name, ratio, mins) VALUES(?,?,?)", (score_data['point_name'], score_data['point_score'], min, ))

        await message.answer(f"{score_data['point_name']}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç - {score_data['point_score']} –∏ –º–∏–Ω–∏–º—É–º - {min} –±—ã–ª –¥–æ–±–∞–ª–µ–Ω", reply_markup=back_and_zakrit_btn('‚¨Ö –ù–∞–∑–∞–¥','back_to_set_min'))
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥", reply_markup=back_btn("back_to_set_min"))
        await state.set_state(SetConfigsToBot.set_points_names)
    # await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1, ))
    try:
        await bot.delete_messages(message.chat.id, (message.message_id,message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ò–ó–ú–ï–ù–Ø–ï–¢ –ò–ú–Ø –ü–£–ù–ö–¢–û–í –ü–†–û–ì–†–ï–°–°–ê------------------------------------------------------------------------------------
from btns.points_for_edit import points_for_edit
@router.callback_query(F.data == 'edit_progress_points')
async def usr_stgs_edit(call: CallbackQuery, bot: Bot):
    progress_points = select_data("SELECT * FROM points")
    if progress_points == []:
        await call.message.answer("–ü—É–Ω–∫—Ç–æ–≤ –µ—â–µ –Ω–µ—Ç", reply_markup=back_btn('back_to_points_main_menu'))
    else:
        await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=points_for_edit('editpoints_','–ù–∞–∑–∞–¥', 'back_to_points_main_menu'))
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.callback_query(F.data.startswith('editpoints_'), StateFilter(None))
async def edit_username(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    user = call.data.split('_')[1]
    await state.update_data(edit_pointname = user)
    await call.message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ \'{user}\'. –í –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤–Ω–µ—Å–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ \'{user}\'", reply_markup=back_and_otmena_btn('points'))
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    #await state.set_state(SetConfigsToBot.set_new_pointname)
    await state.set_state(SetConfigsToBot.set_points_score)
    await call.answer()

# @router.message(SetConfigsToBot.set_new_pointname)
# async def new_usrname(message: Message, state: FSMContext, bot: Bot):
#     #await state.clear()
#     user = await state.get_data()
#     await bot.delete_messages(message.chat.id, (message.message_id-1, ))
#     delete_or_insert_data("UPDATE points SET name = ? WHERE name = ?", (message.text, user['name']))
#     await message.answer(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è {user['name']} –Ω–∞ {message.text}", reply_markup=points_main_menu())
#     await state.clear()



#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –£–î–ê–õ–Ø–ï–¢ –ü–£–ù–ö–¢ –ü–†–û–ì–†–ï–°–°–ê----------------------------------------------------------
@router.callback_query(F.data == 'delete_progress_points')
async def usr_stgs_delete(call: CallbackQuery, bot: Bot):
    progress_points = select_data("SELECT * FROM points")
    if progress_points == []:
        await call.message.answer("–ü—É–Ω–∫—Ç–æ–≤ –µ—â–µ –Ω–µ—Ç", reply_markup=back_btn('back_to_points_main_menu'))
    else:
        await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=points_for_edit('deletepoint_',"–ù–∞–∑–∞–¥", 'back_to_points_main_menu'))
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()


@router.callback_query(F.data.startswith('deletepoint_'), StateFilter(None))
async def edit_username(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    user = call.data.split('_')[1]
    delete_or_insert_data("DELETE FROM points WHERE point_name = ?", (user, ))
    await call.message.answer(f"–í—ã —É–¥–∞–ª–∏–ª–∏ \'{user}\'.'", reply_markup=points_main_menu())
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–¢ –†–ï–ô–¢–ò–ù–ì----------------------------------------------------------
@router.callback_query(F.data == 'users_progress')
async def usr_stgs_delete(call: CallbackQuery, bot: Bot):
    data = ttl_ratiosum_process()
    #progress_points = select_data("SELECT*FROM user_points")
    if data == []:
        await call.message.answer("–ü–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=zakrit_btn())
    else:
        final_message = ''
        for i,x in enumerate(data):
            final_message += str(i+1) + ") "+x['name']+" - "+str(x['total_ratiosun_with_bonuses'])+"\n"
        await call.message.answer(final_message, reply_markup=zakrit_btn())
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()



#------------------------------------------------------------------------------------------------------–Æ–ó–ï–† –í–´–ë–ò–†–ê–ï–¢ –°–í–û–ô –ù–ò–ö–ù–ï–ô–ú--------------------------------------------------------

from btns.user_main import user_main
@router.callback_query(F.data.startswith('userchosen_name_'))
async def edit_username(call: CallbackQuery, state: FSMContext, bot: Bot):
    user = call.data.split('_')[2]
    delete_or_insert_data("UPDATE usernames SET telega_id = ? WHERE name = ?", (call.message.chat.id, user, ))
    await call.message.answer(f"–¢–µ–ø–µ—Ä—å –í–∞—à –Ω–∏–∫–Ω–µ–π–º \'{user}\'", reply_markup = user_main())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

#------------------------------------------------------------------------------------------------------–Æ–ó–ï–† –í–´–ü–û–õ–ù–Ø–ï–¢ –í–û–ó–í–†–ê–¢ –ù–ê –°–í–û–ï –ú–ï–ù–Æ-----------------------------------------------------
@router.callback_query(F.data == 'back_to_users_menu')
async def back_to_users_menu(call: CallbackQuery, bot: Bot):
    await call.message.answer(f"–ì–ª–∞–≤–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=user_main())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
#------------------------------------------------------------------------------------------------------–Æ–ó–ï–† –í–´–ü–û–õ–ù–Ø–ï–¢ –û–¢–ß–ï–¢-----------------------------------------------------------

@router.callback_query(F.data == "otmena")
async def otmena(call: CallbackQuery, state: FSMContext, bot: Bot):
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.clear()
    await call.answer()

async def handle_usr_report(chat_id: int, message_id: int, bot: Bot):
    points_exist = select_data("SELECT*FROM points")
    if points_exist == []:
        await bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª –ø—É–Ω–∫—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    else:
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å", reply_markup=points_for_edit('checkpoint_', '‚ùå –û—Ç–º–µ–Ω–∞','otmena'))
    # await bot.delete_messages(chat_id, (message_id, ))
    try:
        await bot.delete_messages(chat_id, (message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")


@router.callback_query(F.data == 'user_report')
async def usr_report_process(call: CallbackQuery, bot: Bot):
    await handle_usr_report(call.message.chat.id, call.message.message_id, bot)
    await call.answer()


import re
@router.message(lambda message: re.search(r"^(–û—Ç—á–µ—Ç|–ú–æ–π –æ—Ç—á–µ—Ç)$", message.text))
async def report_message_handler(message: Message, bot: Bot):
    user = select_data("SELECT * FROM usernames WHERE telega_id = ?", (message.chat.id,))
    if user != []:
        await handle_usr_report(message.chat.id, message.message_id, bot)



@router.callback_query(F.data.startswith('checkpoint_'), StateFilter(None))
async def edit_checkpoint(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    checkpoint = call.data.split('_')[1]
    await state.update_data(check = checkpoint)
    await call.message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å \'{checkpoint}\'. –í –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤–Ω–µ—Å–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    except TelegramBadRequest:
        print(f"–£ —é–∑–µ—Ä–∞ {call.message.chat.id} –ø–ª–æ—Ö–æ —É–¥–∞–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await call.answer()
    await state.set_state(SetConfigsToBot.set_checkpoint)
    


#from functions import is_date_in_current_week
from datetime import datetime, timedelta, date

# async def userpoints_weekly_insertor(point_name, message, point_score):
#     delete_or_insert_data("INSERT INTO userpoints_weekly (point_name, telega_id, point_score, date)", (point_name, message.chat.id, point_score, date.today(), ))
from btns.otchet_save import otchet_save
@router.message(SetConfigsToBot.set_checkpoint)
async def edit_checkpoint_result(message: Message, state: FSMContext, bot: Bot):
    if re.match(r"^-?\d+(\.\,\d+)?$", message.text):
        score = message.text
        if ',' in score:
            score = score.replace(",", ".")
        #await state.clear()
        user = await state.get_data()
        # await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1))
        try:
            await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1,))
        except TelegramBadRequest:
            print(f"OSHIBKA UDALENIYA")
        delete_or_insert_data("INSERT INTO userpoints_weekly (point_name, telega_id, point_score, date) VALUES(?, ?, ?, ?)", (user['check'], message.chat.id, score, date.today(), ))
        await message.answer(f"–í–∞—à–∞ –æ—Ç–º–µ—Ç–∫–∞ {score} –Ω–∞ {user['check']} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–ö —Å–ø–∏—Å–∫—É –ø—É–Ω–∫—Ç–æ–≤'.", reply_markup=otchet_save(data = f"{score}_{user['check']}"))
        await state.clear()
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–Ω–µ—Å–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        await state.set_state(SetConfigsToBot.set_checkpoint)


#--------------------------------------------------------------------------------------–ò–∑–º–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–∏–Ω—Ç–∞----------------------------------------------------------
from btns.cancel import otmena_btn
@router.callback_query(F.data.startswith('changecheckedpoint_'), StateFilter(None))
async def change_justadded_checkpoint(call: CallbackQuery, state: FSMContext, bot: Bot):
    #print(call.data)
    data = call.data.split("_")
    await call.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {data[2]}. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ {data[1]}", reply_markup=otmena_btn())
    await call.answer()
    await state.update_data(point_name = data[2], point_score = data[1])
    await state.set_state(SetConfigsToBot.set_changecheckpoint)
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")


@router.message(SetConfigsToBot.set_changecheckpoint)
async def change_justadded_checkpoint1(message: Message, state: FSMContext, bot: Bot):
    if re.match(r"^-?\d+(\.\,\d+)?$", message.text):
        score = message.text
        if ',' in score:
            score = score.replace(",", ".")
        data_tochange = await state.get_data()
        try:
            last_checkpoint = select_data("SELECT*FROM user_points WHERE point_name = ? AND telega_id = ? AND date = ? ORDER BY id DESC LIMIT 1", (data_tochange['point_name'], message.chat.id, date.today()))[0]
            last_score = last_checkpoint[3]
            new_score = last_score - int(data_tochange['point_score']) + int(message.text)
            delete_or_insert_data("UPDATE user_points SET score = ? WHERE point_name = ? AND telega_id = ? AND date = ?", (new_score, data_tochange['point_name'], message.chat.id, date.today(), ))
            if message.chat.id == int(admin_id):
                await message.answer(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {message.text} –¥–ª—è {data_tochange['point_name']} –≤–Ω–µ—Å–µ–Ω–æ", reply_markup=points_for_edit('checkpoint_', '‚¨Ö –ù–∞–∑–∞–¥', 'back_to_main_menu', f"{score}_{data_tochange['point_name']}", zakrit=11))
            else:
                await message.answer(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {message.text} –¥–ª—è {data_tochange['point_name']} –≤–Ω–µ—Å–µ–Ω–æ", reply_markup=points_for_edit('checkpoint_', '‚¨Ö –ù–∞–∑–∞–¥', 'back_to_users_menu', f"{score}_{data_tochange['point_name']}", zakrit=11))
        except IndexError:
            if message.chat.id == int(admin_id):
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–µ—Å—Ç–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {data_tochange['point_score']} –Ω–∞ {data_tochange['point_name']}", reply_markup=points_for_edit('checkpoint_', '‚¨Ö –ù–∞–∑–∞–¥', 'back_to_main_menu', zakrit=11))
            else:      
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–µ—Å—Ç–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {data_tochange['point_score']} –Ω–∞ {data_tochange['point_name']}", reply_markup=points_for_edit('checkpoint_', '‚¨Ö –ù–∞–∑–∞–¥', 'back_to_users_menu', zakrit=11))
        await state.clear()    
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–Ω–µ—Å–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        await state.set_state(SetConfigsToBot.set_changecheckpoint)
    # await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1))
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1, ))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")

#------------------------------------------------------------------------------------------------------–Æ–ó–ï–† –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–¢ –°–í–û–ô –†–ï–ô–¢–ò–ù–ì--------------------------------------------------------

# from btns.points_for_edit import points_for_edit

@router.callback_query(F.data == 'user_rating')
async def usr_report_process(call: CallbackQuery, bot: Bot):
    if ttl_ratiosum_process() == []:
        await call.message.answer("–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
    else:
        msg = ''
        for i, x in enumerate(ttl_ratiosum_process()):
            if i+1 == 1:
                msg+=str(i+1)+") " + x['name']+ " " + str(x['total_ratiosun_with_bonuses']) + " ü•á" +'\n'
            elif i+1 == 2:
                msg+=str(i+1)+") " + x['name']+ " " + str(x['total_ratiosun_with_bonuses']) + " ü•à" +'\n'
            elif i+1 == 3:
                msg+=str(i+1)+") " + x['name']+ " " + str(x['total_ratiosun_with_bonuses']) + " ü•â" +'\n'
            else:
                msg+=str(i+1)+") " + x['name']+ " " + str(x['total_ratiosun_with_bonuses']) +'\n'
        await call.message.answer(msg, reply_markup=back_and_zakrit_btn('‚¨Ö –ù–∞–∑–∞–¥', 'back_to_users_menu'))      
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()


#------------------------------------------------------------------------------------------------------–Æ–ó–ï–† –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–¢ –ú–ò–ù–ò–ú–£–ú–´------------------------------------------------------------
@router.callback_query(F.data == 'mins')
async def usr_stgs_delete(call: CallbackQuery, bot: Bot):
    data = select_data("SELECT*FROM points")#[(1, 'kkk', 2, 10), (3, '–¥–∂—Ñ', 1.3, 30), (4, 'kit', 1, 60)]
    if data == []:
        await call.message.answer("–ú–∏–Ω–∏–º—É–º—ã –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω—ã", reply_markup=back_and_zakrit_btn('‚¨Ö –ù–∞–∑–∞–¥', 'back_to_users_menu'))
    else:
        output = ""
        for x in data:
            out_el = str(x[1]) + ": " +str(x[3]) + " / " + str(x[2])+ "\n"
            output = output + out_el
        #print(output)
        await call.message.answer(f"–ú–∏–Ω–∏–º—É–º—ã / –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:\n {output}", reply_markup=back_and_zakrit_btn('‚¨Ö –ù–∞–∑–∞–¥', 'back_to_users_menu'))
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()


@router.message(F.text == "–û—Å—Ç–∞–ª—å–Ω–æ–µ")
async def another_proccess(message:Message, bot: Bot):
    user = select_data("SELECT * FROM usernames WHERE telega_id = ?", (message.chat.id,))
    if user != []:
        await anotherfunc_proccess(message, bot)
    #await bot.delete_messages(message.chat.id, (message.message_id-1, ))


@router.callback_query(F.data == "backto_another")
async def hhh(call: CallbackQuery, bot: Bot):
    await anotherfunc_proccess(call.message, bot)

async def anotherfunc_proccess(message, bot):
    await message.answer("–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", reply_markup=user_main())
    try:
        await bot.delete_messages(message.chat.id, (message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    


from variables import my_progress_process
@router.callback_query(F.data == "user_progress")
async def user_progress(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    my_progress = my_progress_process()
    if my_progress != []:
        msg = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∏–Ω—Ç–∞: —Å—É–º–º–∞ / –º–∏–Ω–∏–º—É–º\n'
        for x in my_progress:
            if x['telega_id'] == call.message.chat.id:
                msg+=f"üî∏ {x['point_name']}: {x['sum_point']} / {x['minimum']}\n"
        await call.message.answer(msg, reply_markup=back_btn(data="backto_another"))
    else:
        await call.message.answer("–ü–æ–∫–∞ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—É—Å—Ç", reply_markup=back_btn(data="backto_another"))
    await call.answer()
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ó–ê–î–ê–ï–¢ –û–ü–û–í–ï–©–ï–ù–ò–Ø----------------------------------------------------------------
from btns.admin_notifations import notifications_btns
@router.callback_query(F.data == 'admin_notifications')
async def notification_inial_proccess(call: CallbackQuery, bot: Bot):
    await call.message.answer('–ú–µ–Ω—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏', reply_markup=notifications_btns())
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ó–ê–î–ê–ï–¢ —Ä–µ–¥–ª–∞–π–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π------------------------------------------------
@router.callback_query(F.data == 'users_notification_redline')
async def notification_inial_proccess(call: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    await call.message.answer('–ó–¥–µ—Å—å –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ Excel —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –í–∞–º. –î–ª—è —ç—Ç–æ–≥–æ –¥–∞–≤–∞–π—Ç–µ –æ—Ç–º–µ—Ç–∏–º –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∏—è —Ä–µ–¥–ª–∞–π–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ß–ê–° –≤ –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', reply_markup=hours())
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_redline_hour)
    await call.answer()

@router.callback_query(F.data.startswith('hour_'), SetConfigsToBot.set_redline_hour)
async def set_redline_hour(call:CallbackQuery, bot: Bot, state: FSMContext):
    redline_hour = call.data.split('_')[1]
    await state.update_data(redline_hour = redline_hour)
    await minutes_dialogue_process(call, bot, state, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {redline_hour} —á–∞—Å. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ú–ò–ù–£–¢–´ –≤ –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')

async def minutes_dialogue_process(call, bot, state, msg):
    await call.message.answer(msg, reply_markup=mins(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="users_notification_redline")))
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
    await state.set_state(SetConfigsToBot.set_redline_day)

@router.callback_query(F.data == "minutes_dialog_proccess")
async def fff(call: CallbackQuery, bot: Bot, state: FSMContext):
    await minutes_dialogue_process(call, bot, state, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ú–ò–ù–£–¢–´ –≤ –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')


@router.callback_query(F.data.startswith('minute_'), SetConfigsToBot.set_redline_day)
async def set_redline_minute(call: CallbackQuery, bot: Bot, state: FSMContext):
    minute = call.data.split('_')[1]
    await state.update_data(minute = minute)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –î–ï–ù–¨ –≤ –∫–æ—Ç–æ—Ä–æ—ã–π –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', reply_markup=weekdays(nazad=InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="minutes_dialog_proccess"), dontrmnd=23))
    await call.answer()
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_redline_final)



@router.callback_query(F.data.startswith('dayofweek_'), SetConfigsToBot.set_redline_final)
async def set_finally_redline_notification(call: CallbackQuery, bot: Bot, state: FSMContext):
    redline_day = call.data.split('_')[1]
    redline_notification = await state.get_data()
    await call.message.answer(f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {redline_notification['redline_hour']}:{redline_notification['minute']}.\n–î–µ–Ω—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {redline_day}.", reply_markup=admin_replybtns())#, reply_markup=back_btn("–ù–∞–∑–∞–¥", f"")
    delete_or_insert_data("UPDATE admin SET red_hour = ?, red_minute = ?, red_day = ? WHERE telega_id = ?", (redline_notification['redline_hour'], redline_notification['minute'], redline_day, call.message.chat.id))
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1, ))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()
    await state.clear()


@router.callback_query(F.data == "admin_notifacion")
async def start_admin_notification(call: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    await set_firstday_of_notification(call.message, state, bot, "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–µ–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –æ—Ç—á–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ï—Å–ª–∏ –¥–µ–Ω—å –æ–¥–∏–Ω —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–û–•–†–ê–ù–ò–¢–¨")
    call.answer()

@router.callback_query(F.data == "dontremindme")
async def start_admin_notification(call: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    delete_or_insert_data("UPDATE usernames SET hour=?, minute=? , period=? WHERE telega_id=?", ('','','', call.message.chat.id, ))
    await call.message.answer('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã üîá', reply_markup=zakrit_btn())
    # await bot.delete_messages(call.message.chat.id, (call.message.message_id, ))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()


async def set_firstday_of_notification(message, state, bot, text):
    await message.answer(text, reply_markup=weekdays(remove_day='', otmena=InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="otmena")))
    notification_date = await state.get_data()
    try:
        await state.update_data(name = notification_date['name1'])
    except Exception as e:
        print("Oshibka "+ str(e))
        await state.update_data(name = message.text)
    await state.set_state(SetConfigsToBot.set_notification) 
    # await bot.delete_messages(message.chat.id, (message.message_id, ))
    try:
        await bot.delete_messages(message.chat.id, (message.message_id,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")


#------------------------------------------------------------------------------------------------------–ê–î–ú–ò–ù –í–´–ü–û–õ–ù–Ø–ï–¢ –û–¢–ü–†–ê–í–ö–£ –°–û–û–ë–©–ï–ù–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú------------------------------------------------
from btns.msg_usr import msg_usrbtns, msg_frequency, theme_explorer
@router.callback_query(F.data == 'msg_to_users')
async def msg_usr(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer("–ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=msg_usrbtns())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.callback_query(F.data == 'send_msg')
async def msg_usr(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=otmena_btn())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_msgtheme_to_usr)
    await call.answer()

@router.message(SetConfigsToBot.set_msgtheme_to_usr)
async def msg_usr(message: Message, state: FSMContext, bot: Bot):
    await msg_usr_sub(message, state, bot)
                
@router.callback_query(F.data == 'send_msg')
async def msg_usr(call: CallbackQuery, state: FSMContext, bot: Bot):
    await msg_usr_sub(call.message, state, bot)
    await call.answer()

async def msg_usr_sub(message, state, bot, state_data = None, from_change = False):
    if state_data==None:
        await state.update_data(msg_theme = message.text)
    else:
        await state.update_data(msg_theme = state_data)
    if from_change==True:
        await state.update_data(from_change = True)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=otmena_btn())
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_msg_to_usr)
    

@router.message(SetConfigsToBot.set_msg_to_usr)
async def msg_usr_date(message: Message, bot: Bot, state: FSMContext):
    await msg_usr_datesub(message, bot, state)

@router.callback_query(F.data == 'set_msg_to_usr')
async def msg_usr_date1(call: CallbackQuery, state: FSMContext, bot: Bot):
    await msg_usr_datesub(call.message, bot, state)

async def msg_usr_datesub(message, bot, state):
    await state.update_data(msg = message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∞—Å—Ç–æ—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=msg_frequency())
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")


@router.callback_query(F.data == 'send_msg_repeatly')
async def msg_usr(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(frequency = 'cron')
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É–µ—Ç –æ–ø–æ–≤–µ—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 21:05", reply_markup=back_and_otmena_btn('set_msg_to_usr'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_msgtime_to_usr)
    await call.answer()


async def msgtime_to_usr(message, bot, state):
    msg_data = await state.get_data()
    if re.match(r'^(?:[01]\d|2[0-3]):[0-5]\d$', message.text):
        time = message.text
        if ' ' in message.text:
            time = message.text.replace(" ", "")
        time = time.split(":")
        if hasattr(msg_data, 'from_change'):
            delete_or_insert_data("UPDATE admin_messages SET msg=?, frequency=?, msg_hour=?, msg_minute=?) WHERE msg_theme=?", (msg_data['msg'], msg_data['frequency'], time[0], time[1], msg_data['msg_theme']))
        else:
            delete_or_insert_data("INSERT INTO admin_messages (msg, msg_theme, frequency, msg_hour, msg_minute) VALUES (?,?,?,?,?)", (msg_data['msg'], msg_data['msg_theme'], msg_data['frequency'], time[0], str(int(time[1])+5) if int(time[1]) <= 54 else time[1]))
        await message.answer(f" –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤—Å–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {message.text}", reply_markup=back_and_zakrit_btn(backbtn_text='‚¨Ö –ù–∞–∑–∞–¥', data="send_msg_repeatly"))
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", reply_markup=zakrit_btn())
        await state.set_state(SetConfigsToBot.set_msgtime_to_usr)
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")

@router.message(SetConfigsToBot.set_msgtime_to_usr)
async def msg_usr_date(message: Message, bot: Bot, state: FSMContext):
    await msgtime_to_usr(message, bot, state)



@router.callback_query(F.data == 'send_msg_ones')
async def send_msg_ones(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(frequency = 'date')
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É–µ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20.02.2025 11:23", reply_markup=back_and_otmena_btn('set_msg_to_usr'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await state.set_state(SetConfigsToBot.set_msgdatetime_to_usr)
    await call.answer()

from variables import is_in_future_datetime
@router.message(SetConfigsToBot.set_msgdatetime_to_usr)
async def send_msg_ones1(message: Message, bot: Bot, state: FSMContext):
    if re.match(r'^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d{2} (0[0-9]|1[0-9]|2[0-3]):[0-5]\d$', message.text):
        if is_in_future_datetime(date_str=message.text, date_format='%d.%m.%Y %H:%M'):
            date_time = message.text
            date_time = date_time.split(" ")
            date = date_time[0]
            date_obj = datetime.strptime(date, '%d.%m.%Y')
            new_date_str = date_obj.strftime('%Y-%m-%d')
            # new_dttime = new_date_str+" "+date_time[1]
            time_arr = date_time[1].split(":")
            msg_data = await state.get_data()
            if hasattr(msg_data, 'from_change'):
                delete_or_insert_data("UPDATE admin_messages SET msg=?, frequency=?, msg_hour=?, msg_minute=?, msg_date = ? WHERE msg_theme=?", (msg_data['msg'], msg_data['frequency'], time_arr[0], str(int(time_arr[1])+5), new_date_str, msg_data['msg_theme']))
            else:
                delete_or_insert_data("INSERT INTO admin_messages (msg, msg_theme, frequency, msg_hour, msg_minute, msg_date) VALUES (?,?,?,?,?,?)", (msg_data['msg'], msg_data['msg_theme'], 'date', time_arr[0], str(int(time_arr[1])+5) if int(time_arr[1]) <= 54 else time_arr[1], new_date_str, ))
            await message.answer(f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {message.text}", reply_markup=back_and_zakrit_btn(backbtn_text='‚¨Ö –ù–∞–∑–∞–¥', data="send_msg_ones"))
            await state.clear()
        else:
            await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", reply_markup=zakrit_btn())
            await state.set_state(SetConfigsToBot.set_msgdatetime_to_usr)
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", reply_markup=zakrit_btn())
        await state.set_state(SetConfigsToBot.set_msgdatetime_to_usr)
    try:
        await bot.delete_messages(message.chat.id, (message.message_id, message.message_id-1,))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")


@router.callback_query(F.data == 'changemsg')
async def change_msg(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=theme_explorer('changemsg'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()


@router.callback_query(F.data.startswith('changemsg_'))
async def change_msg1(call: CallbackQuery, state: FSMContext, bot: Bot):
    msg_theme = call.data.split('_')[1]
    await msg_usr_sub(call.message, state, bot, state_data = msg_theme, from_change = True)


@router.callback_query(F.data == 'deletemsg')
async def delete_msg(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=theme_explorer('deletemsg'))
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.callback_query(F.data.startswith('deletemsg_'))
async def delete_msg1(call: CallbackQuery, state: FSMContext, bot: Bot):
    msg_theme = call.data.split('_')[1]
    delete_or_insert_data("DELETE FROM admin_messages WHERE msg_theme=?", (msg_theme, ))
    await call.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", reply_markup=zakrit_btn())
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

from btns.sum_btns import sum_btns
@router.message(Command("project_support"))
async def charity_start(message: Message, state: FSMContext, bot: Bot):
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å, –∑–∞ —Ç–æ —á—Ç–æ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–µ –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–µ—Ç–æ–≤ –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º–æ–π.",  reply_markup=sum_btns())
    #await state.set_state(SetConfigsToBot.set_rub)

async def rub_proccess(message, state, bot, sum):
    my_amount = int(f'{sum}00')
    await bot.send_invoice(
        chat_id=message.chat.id, 
        title="üí•üí•üí•", 
        description="–ù–∞ —Ä–∞–∑–≤–∏—Ç–µ –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", 
        payload="project_support", 
        provider_token='381764678:TEST:119549', 
        currency="RUB", 
        start_parameter="charity", 
        need_phone_number=True, 
        prices=[{'label': '–†—É–±', 'amount': my_amount}]
        )
    await state.clear()


@router.callback_query(F.data == '150_rub')
async def rub_150(call: CallbackQuery, state: FSMContext, bot: Bot):
    #await state.update_data(rub = call.data.split("_")[0])
    await rub_proccess(call.message, state, bot, call.data.split("_")[0])
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.callback_query(F.data == '300_rub')
async def rub_300(call: CallbackQuery, state: FSMContext, bot: Bot):
    #await state.update_data(rub = call.data.split("_")[0])
    await rub_proccess(call.message, state, bot, call.data.split("_")[0])
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.callback_query(F.data == 'vvesti_rub')
async def rub_vvesti(call: CallbackQuery, state: FSMContext, bot: Bot):
    #await state.update_data(rub = call.data.split("_")[0])
    #await rub_proccess(call.message, state, bot, call.data.split("_")[0])
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è (–±–µ–∑ –† –∏–ª–∏ —Ä—É–±).')
    await state.set_state(SetConfigsToBot.set_rub)
    try:
        await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    except TelegramBadRequest:
        print(f"OSHIBKA UDALENIYA")
    await call.answer()

@router.message(F.text.isdigit()==False, SetConfigsToBot.set_rub)
async def rub_handler1(message: Message, state: FSMContext, bot: Bot):
    await message.answer('–ü–æ—Ö–æ–∂–µ —á—Ç–æ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤–∞')
    await state.set_state(SetConfigsToBot.set_rub)

from re import fullmatch
@router.message(F.text.isdigit(), SetConfigsToBot.set_rub)
async def rub_handler2(message: Message, state: FSMContext, bot: Bot):
    await rub_proccess(message, state, bot, message.text)



from aiogram.types import PreCheckoutQuery
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot, state: FSMContext):
    #print(f'pre_chekaut:{pre_checkout_query}')
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    #await bot.send_message(pre_checkout_query.from_user.id, '–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º, –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂.')
    

async def num_handler(call, state, bot, text ,new_state):
    if '_' in call.data: 
        my_num = call.data.split('_')
        await state.update_data(num = my_num[1])
    # tmp_data = await state.get_data()
    # await state.update_data(tmp_data)
    await bot.delete_messages(call.message.chat.id, (call.message.message_id, call.message.message_id-1))
    await call.message.answer(text)
    await call.answer()
    await state.set_state(new_state)
    #'–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –¥–ª—è –†–ò–õ–ò'

@router.callback_query(F.data == "payagain")
async def nnnn(call: CallbackQuery, state: FSMContext, bot: Bot):
    await num_handler(call, state, bot, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –í–∞—à–µ–π –∫–∞—Ä—Ç—ã. –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ç—Ç—É —Å—É–º–º—É.', SetConfigsToBot.set_rub)


from aiogram.types import ContentType
@router.message(lambda mes: mes.content_types == ContentType.SUCCESSFUL_PAYMENT)
async def rub_ssss(message: Message, bot: Bot, state: FSMContext):
    #await rub_handler(message, bot, state)
    await message.answer("Ever==+++")

